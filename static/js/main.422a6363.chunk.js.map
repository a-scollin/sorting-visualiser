{"version":3,"sources":["maincomp/Algos/Mergesort.js","maincomp/Algos/Quicksort.js","maincomp/maincomp.js","maincomp/Algos/Bubblesort.js","maincomp/Algos/Insertsort.js","App.js","serviceWorker.js","index.js"],"names":["MergeAlgoHandler","arrayin","anims","arra","slice","MergeSort","arraypassed","startidx","endidx","middle","Math","floor","auxillaryArray","startIndex","middleIndex","endIndex","animations","sortArray","i","j","push","length","merge","QuickAlgoHandler","array","QuickSort","low","high","pi","piv","temp","temp2","partition","Maincomp","props","state","this","resetArr","swapped","len","tmp","BubbleAlgoHandler","sortedarr","document","getElementsByClassName","HighlightTwo","updateHeight","alert","setTimeout","setState","getElementById","disabled","getSpeed","animation","boo","col","barz","firstElmIndex","secondElmIndex","barOne","style","barTwo","backgroundColor","value","index","height","barStyle","n","key","InsertAlgoHandler","BubblesortHandler","MergesortHandler","InsertsortHandler","QuicksortHandler","random","arr","className","id","onClick","runHandler","map","val","idx","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.422a6363.chunk.js","sourcesContent":["export function MergeAlgoHandler(arrayin){\n\n    let anims = [];\n    let arra = arrayin.slice();\n    MergeSort(arra,0,arra.length-1,anims);\n    return [anims,arra];\n\n}\n\nfunction MergeSort(arraypassed, startidx, endidx, anims){\n\n    if(startidx === endidx) {\n        return;\n    }\n\n    const middle = Math.floor((startidx+endidx)/2);\n\n    MergeSort(arraypassed,startidx,middle,anims);\n    MergeSort(arraypassed,middle+1,endidx,anims);\n    merge(arraypassed,startidx,middle,endidx,anims);\n\n\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([0,i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([1,i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([2,sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([2,sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([0,i, i]);\n        animations.push([1,i, i]);\n        animations.push([2,sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([0,j, j]);\n        animations.push([1,j, j]);\n        animations.push([2,sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n","export function QuickAlgoHandler(arrayin){\n    const array = arrayin.slice();\n    const anims = [];\n\n    QuickSort(array,0,array.length-1,anims)\n\n    return [anims,array];\n\n}\n\nfunction QuickSort(array, low, high, anims){\n    if (low < high)\n        {\n            /* pi is partitioning index, arr[pi] is\n              now at right place */\n            let pi = partition(array, low, high, anims);\n\n            // Recursively sort elements before\n            // partition and after partition\n            QuickSort(array, low, pi-1,anims);\n            QuickSort(array, pi+1, high,anims);\n        }\n    }\n\n\nfunction partition(array, low, high, anims){\n\n    const piv = array[high];\n    let i = low - 1;\n    for(let j=low;j<high;j++){\n        if(array[j]<piv){\n            i++;\n\n            anims.push([0,j,high])\n            anims.push([1,j,high])\n\n\n            anims.push([2,j,array[i]]);\n            anims.push([2,i,array[j]]);\n\n\n            //swap\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n\n        }\n    }\n\n    anims.push([2,high,array[i+1]]);\n    anims.push([2,i+1,array[high]]);\n    //swap\n    const temp2 = array[i+1];\n    array[i+1] = array[high];\n    array[high] = temp2;\n\n    return i+1;\n\n}\n","import React from 'react';\nimport './maincomp.css';\nimport {\n    BubbleAlgoHandler\n} from './Algos/Bubblesort.js';\nimport {\n    MergeAlgoHandler\n} from './Algos/Mergesort.js';\nimport {\n    InsertAlgoHandler\n} from './Algos/Insertsort.js';\nimport {\n    QuickAlgoHandler\n} from './Algos/Quicksort.js';\n\nclass Maincomp extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArr();\n    }\n\n    BubblesortHandler() {\n\n        const [anims, sortedarr] = BubbleAlgoHandler(this.state.array.slice());\n        const barz = document.getElementsByClassName('bar');\n\n        for (let i = 0; i < anims.length; i++) {\n\n            switch (anims[i][0]) {\n                case 0:\n                    this.HighlightTwo(anims[i], i, true);\n                    break;\n                case 1:\n                    this.HighlightTwo(anims[i], i, false);\n                    break;\n                case 2:\n                    this.updateHeight(anims[i], i)\n                    break;\n                default:\n                    alert(\"oops\");\n            }\n        }\n\n        setTimeout(() => {\n            this.setState({\n                array: sortedarr\n            });\n            document.getElementById('run').disabled = false;\n            document.getElementById('reset').disabled = false;\n        }, anims.length * this.getSpeed())\n    }\n\n    HighlightTwo(animation, i, boo) {\n\n        const col = (boo) ? 'red' : 'blue';\n        const barz = document.getElementsByClassName('bar');\n        const [ign, firstElmIndex, secondElmIndex] = animation;\n        const barOne = barz[firstElmIndex].style;\n        const barTwo = barz[secondElmIndex].style;\n        setTimeout(() => {\n            barOne.backgroundColor = col;\n            barTwo.backgroundColor = col;\n        }, i * this.getSpeed());\n\n    }\n\n    getSpeed(){\n\n        return document.getElementById('speed').value;\n    }\n\n    updateHeight(animation, i) {\n        const [ign3, index, height] = animation;\n        const barz = document.getElementsByClassName('bar');\n        const barStyle = barz[index].style;\n        setTimeout(() => {\n            barStyle.height = `${height*6}px`;\n        }, i * this.getSpeed());\n    }\n\n    MergesortHandler() {\n        const [anims, sortedarr] = MergeAlgoHandler(this.state.array.slice());\n        const barz = document.getElementsByClassName('bar');\n\n        for (let i = 0; i < anims.length; i++) {\n\n            switch (anims[i][0]) {\n                case 0:\n                    this.HighlightTwo(anims[i], i, true);\n                    break;\n                case 1:\n                    this.HighlightTwo(anims[i], i, false);\n                    break;\n                case 2:\n                    this.updateHeight(anims[i], i)\n                    break;\n                default:\n                    alert(\"oops\");\n            }\n        }\n\n\n        setTimeout(() => {\n            this.setState({array: sortedarr});\n            document.getElementById('run').disabled = false;\n            document.getElementById('reset').disabled = false;\n    }, anims.length * this.getSpeed())\n\n\n    }\n\n    InsertsortHandler() {\n        const [anims, sortedarr] = InsertAlgoHandler(this.state.array);\n\n        const barz = document.getElementsByClassName('bar');\n\n        for (let i = 0; i < anims.length; i++) {\n\n            switch (anims[i][0]) {\n                case 0:\n                    this.HighlightTwo(anims[i], i, true);\n                    break;\n                case 1:\n                    this.HighlightTwo(anims[i], i, false);\n                    break;\n                case 2:\n                    this.updateHeight(anims[i], i)\n                    break;\n                default:\n                    alert(\"oops\");\n            }\n\n        }\n\n        setTimeout(() => {\n            this.setState({\n                array: sortedarr\n            });\n            document.getElementById('run').disabled = false;\n            document.getElementById('reset').disabled = false;\n        }, anims.length * this.getSpeed())\n\n    }\n\n    QuicksortHandler() {\n        const [anims, sortedarr] = QuickAlgoHandler(this.state.array);\n        const barz = document.getElementsByClassName('bar');\n\n        for (let i = 0; i < anims.length; i++) {\n\n            switch (anims[i][0]) {\n\n                case 0:\n                    this.HighlightTwo(anims[i], i, true);\n\n                    break;\n                case 1:\n                    this.HighlightTwo(anims[i], i, false);\n\n                    break;\n                case 2:\n                    this.updateHeight(anims[i], i)\n\n\n                    break;\n                default:\n                    alert(\"oops\");\n            }\n\n        }\n\n        setTimeout(() => {\n            this.setState({\n                array: sortedarr\n            });\n            document.getElementById('run').disabled = false;\n            document.getElementById('reset').disabled = false;\n        }, anims.length * this.getSpeed())\n\n    }\n\n    runHandler() {\n\n        document.getElementById('run').disabled = true;\n        document.getElementById('reset').disabled = true;\n\n        const selection = document.getElementById('algo').value;\n\n        switch (selection) {\n            case 'Bubblesort':\n                this.BubblesortHandler();\n\n                break;\n            case 'Mergesort':\n                this.MergesortHandler();\n                break;\n\n            case 'Insertsort':\n                this.InsertsortHandler();\n                break;\n\n            case 'Quicksort':\n                this.QuicksortHandler();\n                break;\n            default:\n                alert(\"Not Implemented!\")\n\n        }\n\n    }\n\n\n\n    resetArr() {\n        const array = [];\n        for (let i = 0; i < 100; i++) {\n            array.push(Math.floor(Math.random() * (101)));\n        }\n        this.setState({\n            array: array\n        });\n    }\n\n    render() {\n\n        const arr = this.state.array;\n\n        return ( <\n            >\n            <div className=\"sel\">\n            <\n            button id=\"run\" onClick = {\n                () => this.runHandler()\n            } > run! < /button> <\n            button id=\"reset\" onClick = {\n                () => this.resetArr()\n            } > reset! < /button>\n            </div>\n            <div className=\"sel\">\n            <p>Algorithims:</p>\n            <select id = 'algo' >\n            <option > Bubblesort < /option>\n            <option > Mergesort < /option>\n            <option > Insertsort < /option>\n            <option > Quicksort < /option>\n            </select>\n            </div>\n            <div className=\"sel\">\n            <p>Animation Speed (Ms):</p>\n            <select id = 'speed' >\n            <option > 1 < /option>\n            <option > 2 < /option>\n            <option > 4 < /option>\n            <option > 8 < /option>\n            <option > 16 < /option>\n            <option > 32 < /option>\n            <option > 64 < /option>\n            </select>\n            </div>\n            <div className=\"arraydiv\">{\n                arr.map((val, idx) => ( <\n                    div key = {\n                        idx\n                    }\n                    className = \"bar\"\n                    style = {\n                        {\n                            height: `${val*6}px`\n                        }\n                    } > < /div>\n                ))\n            }\n            </div>\n\n            <\n            />\n        )\n\n\n\n    }\n\n}\n\nexport default Maincomp;\n","export function BubbleAlgoHandler(arraypassed){\n    const array = arraypassed.slice();\n    const anims = [];\n    let len = array.length;\n    let swapped;\n\n    do {\n        swapped = false;\n        for (let i = 0; i < len-1; i++) {\n            anims.push([0,i,i+1]); //look at array i this is i(mod4) == 0\n            anims.push([1,i,i+1]); //unlook at array i this is i(mod4) == 1\n            if (array[i] > array[i + 1]) {\n                anims.push([2,i,array[i+1]]); //array i is now array i+1 height\n                anims.push([2,i+1,array[i]]); //array i+1 is now array i height\n                //swap!\n                let tmp = array[i];\n                array[i] = array[i + 1];\n                array[i + 1] = tmp;\n                swapped = true;\n\n        }\n    }\n    } while (swapped);\n\n    return [anims,array];\n\n}\n","export function InsertAlgoHandler(arrayin){\n\n    const array = arrayin.slice();\n    const anims = [];\n\n    let n = array.length;\n    for (let i = 1; i < n; i++) {\n        let key = array[i];\n\n        let j = i - 1;\n            anims.push([0,j,i]);\n            anims.push([1,j,i]);\n        while (j >= 0 && array[j] > key) {\n\n            anims.push([2,j+1,array[j]]);\n\n            array[j + 1] = array[j];\n            j = j - 1;\n\n            if(j>=0){\n                anims.push([0,j,i]);\n                anims.push([1,j,i]);\n            }\n\n\n        }\n\n        anims.push([2,j+1, key])\n        array[j + 1] = key;\n    }\n\n\n    return [anims,array];\n\n\n}\n","import React from 'react';\nimport './App.css';\nimport Maincomp from './maincomp/maincomp.js';\nfunction App() {\n  return (\n    <>\n\t <Maincomp/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}